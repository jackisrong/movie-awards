[{"D:\\Documents\\Projects\\movie-awards\\src\\index.js":"1","D:\\Documents\\Projects\\movie-awards\\src\\App.js":"2","D:\\Documents\\Projects\\movie-awards\\src\\MovieResults.js":"3","D:\\Documents\\Projects\\movie-awards\\src\\MovieSearch.js":"4","D:\\Documents\\Projects\\movie-awards\\src\\MovieNominations.js":"5","D:\\Documents\\Projects\\movie-awards\\src\\MovieResult.js":"6","D:\\Documents\\Projects\\movie-awards\\src\\MovieNomination.js":"7"},{"size":230,"mtime":1609474345099,"results":"8","hashOfConfig":"9"},{"size":6272,"mtime":1609543626203,"results":"10","hashOfConfig":"9"},{"size":729,"mtime":1609544309959,"results":"11","hashOfConfig":"9"},{"size":603,"mtime":1609476807993,"results":"12","hashOfConfig":"9"},{"size":929,"mtime":1609544337637,"results":"13","hashOfConfig":"9"},{"size":1097,"mtime":1609542205209,"results":"14","hashOfConfig":"9"},{"size":830,"mtime":1609206357987,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1424p0x",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"D:\\Documents\\Projects\\movie-awards\\src\\index.js",[],["32","33"],"D:\\Documents\\Projects\\movie-awards\\src\\App.js",["34","35","36"],"import './App.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport MovieSearch from './MovieSearch';\r\nimport MovieResults from './MovieResults';\r\nimport MovieNominations from './MovieNominations';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst API_URL_BASE = 'http://www.omdbapi.com/';\r\nconst API_URL_KEY = '&apikey=52aab954';\r\nconst API_URL_TYPE = '&type=movie';\r\n\r\nconst LOCAL_STORAGE_KEY = 'movieAwards.nominationIds';\r\n\r\nfunction App() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [results, setResults] = useState([]);\r\n    const [nominations, setNominations] = useState([]);\r\n    const [isFetching, setIsFetching] = useState(false);\r\n    const [queryErrorMessage, setQueryErrorMessage] = useState('');\r\n\r\n    const resultsColRef = useRef();\r\n\r\n    // manage first load\r\n    useEffect(() => {\r\n        // get nominations from local storage\r\n        let storedNominations = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n        if (storedNominations)\r\n            setNominations(storedNominations);\r\n\r\n        // add listener to results column for infinite scroll\r\n        resultsColRef.current.addEventListener('scroll', handleResultsScroll);\r\n    }, []);\r\n\r\n    // manage when nominations change\r\n    useEffect(() => {\r\n        // store nominations into local storage when a new movie is nominated\r\n        // TODO: we're storing the entire JSON object of the nomination that's\r\n        //       returned by the API. Ideally, we want to only store the IMDB\r\n        //       ID and re-query the API on load to save space and in case\r\n        //       data was changed on the API side\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(nominations));\r\n    }, [nominations]);\r\n\r\n    // when search term is changed, call search API\r\n    useEffect(searchAPI, [searchTerm]);\r\n\r\n    useEffect(() => {\r\n        if (!isFetching)\r\n            return;\r\n        searchAPI(true);\r\n    }, [isFetching]);\r\n\r\n    // call API with search term\r\n    function searchAPI(fetchMore = false) {\r\n        let pageNumber = 1;\r\n        if (fetchMore && results) {\r\n            // ASSUME: API returns 10 results per page\r\n            // TODO: to make this more robust, keep track of which page we last queried\r\n            //       instead of relying on the assumption\r\n            pageNumber = Math.floor(results.length / 10) + 1;\r\n        }\r\n\r\n        fetch(API_URL_BASE + '?s=' + searchTerm + API_URL_TYPE + '&page=' + pageNumber + API_URL_KEY)\r\n            .then((resp) => resp.json())\r\n            .then((data) => {\r\n                if (data.Response === \"False\") {\r\n                    // no result from API\r\n                    setResults([]);\r\n                    setQueryErrorMessage(data.Error);\r\n                } else {\r\n                    // API returns valid data\r\n                    if (fetchMore && results) {\r\n                        if (results.length < data.totalResults) {\r\n                            // if don't already have all the results, we add the new results\r\n                            let newResults = [...results, ...data.Search];\r\n                            setResults(newResults);\r\n                        }\r\n                    } else {\r\n                        setResults(data.Search);\r\n                    }\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setIsFetching(false);\r\n            })\r\n            .catch((err) => {\r\n                // in case of error\r\n                console.log(err)\r\n            });\r\n    }\r\n\r\n    // handler for when search box text has changed\r\n    function handleSearch(e) {\r\n        setSearchTerm(e.target.value);\r\n    }\r\n\r\n    // handler for results scrollbar\r\n    function handleResultsScroll(e) {\r\n        // take total scrollable height subtract the amount we've scrolled\r\n        // if this is equal to the amount of content we can see, then we're at the bottom\r\n        if (resultsColRef.current.scrollHeight - resultsColRef.current.scrollTop === resultsColRef.current.clientHeight && !isFetching) {\r\n            setIsFetching(true);\r\n        }\r\n    }\r\n\r\n    // handler for when nominate button is clicked on movie result\r\n    // ASSUME: if a movie is already nominated, the button was disabled\r\n    //         so it could not have triggered this function\r\n    function nominateClick(result) {\r\n        let newNominations = [...nominations, result];\r\n        setNominations(newNominations);\r\n    }\r\n\r\n    // handler for when remove button is clicked on movie nomination\r\n    function removeNominationClick(imdbId) {\r\n        let newNominations = nominations.filter(nomination => nomination.imdbID !== imdbId);\r\n        setNominations(newNominations);\r\n    }\r\n\r\n    return (\r\n        <Container id='app'>\r\n            <Row>\r\n                <h1>Movie Awards</h1>\r\n            </Row>\r\n            <Row>\r\n                <p>Search for movies and add them to your list of nominations!</p>\r\n            </Row>\r\n            <Row id='search-row'>\r\n                <MovieSearch searchChange={handleSearch} />\r\n            </Row>\r\n            <Row id='alert-row'>\r\n                <Alert variant='info' show={nominations.length >= 5}>\r\n                    You have nominated {nominations.length} movies! You only need 5 nominations but feel free to keep adding more!\r\n                </Alert>\r\n            </Row>\r\n            <Row id='content-row'>\r\n                <Col id='results-col' ref={resultsColRef}>\r\n                    <MovieResults searchTerm={searchTerm} results={results} nominations={nominations} queryErrorMessage={queryErrorMessage} nominateClick={nominateClick} />\r\n                </Col>\r\n                <Col id='nominations-col'>\r\n                    <MovieNominations nominations={nominations} removeNominationClick={removeNominationClick} />\r\n                </Col>\r\n            </Row>\r\n            <Row id='footer-row'>\r\n                <a href='http://jackrong.me' target='_blank' rel='noreferrer'>Made with ðŸŒ¯ in Vancouver by Jack Rong</a>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","D:\\Documents\\Projects\\movie-awards\\src\\MovieResults.js",[],"D:\\Documents\\Projects\\movie-awards\\src\\MovieSearch.js",[],"D:\\Documents\\Projects\\movie-awards\\src\\MovieNominations.js",[],"D:\\Documents\\Projects\\movie-awards\\src\\MovieResult.js",[],"D:\\Documents\\Projects\\movie-awards\\src\\MovieNomination.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":36,"column":8,"nodeType":"43","endLine":36,"endColumn":10,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"45","line":49,"column":26,"nodeType":"43","endLine":49,"endColumn":38,"suggestions":"46"},{"ruleId":"41","severity":1,"message":"47","line":55,"column":8,"nodeType":"43","endLine":55,"endColumn":20,"suggestions":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleResultsScroll'. Either include it or remove the dependency array.","ArrayExpression",["51"],"React Hook useEffect has a missing dependency: 'results'. Either include it or remove the dependency array.",["52"],"React Hook useEffect has a missing dependency: 'searchAPI'. Either include it or remove the dependency array.",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},"Update the dependencies array to be: [handleResultsScroll]",{"range":"60","text":"61"},"Update the dependencies array to be: [results, searchTerm]",{"range":"62","text":"63"},"Update the dependencies array to be: [isFetching, searchAPI]",{"range":"64","text":"65"},[1387,1389],"[handleResultsScroll]",[2005,2017],"[results, searchTerm]",[2126,2138],"[isFetching, searchAPI]"]